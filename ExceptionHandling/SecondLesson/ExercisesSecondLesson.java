package ExceptionHandling.SecondLesson;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class ExercisesSecondLesson {
    public static void main(String[] args) {
        String path = "D:\\JavaProjects\\JavaLean\\ExceptionHandling\\SecondLesson\\namesInfo.txt";
        writeFile(digitReplacer(reader(path)), path);


    }

    private static List<String[]> reader(String path) {
        List<String[]> result = new ArrayList<>();
        try {
            BufferedReader file = new BufferedReader(new FileReader(path));
            String line = "";
            while ((line = file.readLine()) != null){
                String[] tempArray = line.split("=");
                if(!tempArray[1].equals("?") && !isNumber(tempArray[1])){
                    throw new RuntimeException(String.format("Incorrect data: %s", line));
                }
                result.add(tempArray);
            }
        } catch (IOException e) {
            throw new RuntimeException(e.getMessage());
        }
        return result;

    }//=====================================================
    public static boolean isNumber(String str){
        try {
            Integer.parseInt(str);
            return true;
        } catch (NumberFormatException e){
            return false;
        }
    }//=====================================================
    public static List<String[]> digitReplacer(List<String[]> data){
        for (String[] line : data){
            if (line[1].equals("?")){
                line[1] = String.valueOf(line[0].length());
            }
        } return  data;
    }//=====================================================
    public static void writeFile(List<String[]> data, String path) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(path));) {
            for (String[] line : data){
                writer.write(String.format("%s=%s", line[0],line[1]));
                writer.newLine();
            }
        } catch (IOException e){
            throw new RuntimeException(e.getMessage());
        }
    }
}
//üìî –ó–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–∞–π–ª —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏:
//        –ê–Ω–Ω–∞=4
//        –ï–ª–µ–Ω–∞=5
//        –ú–∞—Ä–∏–Ω–∞=6
//        –í–ª–∞–¥–∏–º–∏—Ä=?
//        –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω=?
//        –ò–≤–∞–Ω=4
//        –†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
//        (–ª–∏–±–æ HashMap, –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å –Ω–∏–º –∑–Ω–∞–∫–æ–º—ã). –í –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏
//        –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ ?, –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ.
//        –ï—Å–ª–∏ –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ –º–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª, –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç —á–∏—Å–ª–∞ –∏–ª–∏ ?,
//        –±—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.–ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
//        –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ ?.